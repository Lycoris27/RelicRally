//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Code/Script/Mitchels Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""7957a6e0-0272-4c06-85be-b2f3c65c0ebe"",
            ""actions"": [
                {
                    ""name"": ""Mouse Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5ba3b3d7-7a79-4d15-bebe-b40c4acd7297"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""712dcaa2-2d21-4c4f-a4c8-21f8e7ddc921"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SingleButtonMash"",
            ""id"": ""76833813-b49c-4436-8842-acad1a300357"",
            ""actions"": [
                {
                    ""name"": ""Mash"",
                    ""type"": ""Button"",
                    ""id"": ""c440b2c6-b989-4ac9-b5a6-735d8a3ca5c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2480eae1-e1d3-49cd-808b-2e6a99a52742"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74e38882-e3dd-4d76-a24c-f70dfc548ee2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TimerQTE"",
            ""id"": ""93ee31c7-d1f1-40cd-b104-20a175c18289"",
            ""actions"": [
                {
                    ""name"": ""QTE_E"",
                    ""type"": ""Button"",
                    ""id"": ""d9f5c474-27ed-42f2-94be-3a84031f1b76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa30975c-7d52-470d-9308-2aafeadc7539"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buttons"",
            ""id"": ""e5f49b21-e3bf-4161-b42b-3d619643f898"",
            ""actions"": [
                {
                    ""name"": ""Button1"",
                    ""type"": ""Button"",
                    ""id"": ""4e706623-2ff8-485a-9788-a17206d070c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""30016451-1f13-460a-8eab-c0a1f04fa9a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a44e6365-c6af-4abe-ae07-bdc5c408653b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""481ca81f-4d91-4814-9d31-3b1aeceb35dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Space"",
            ""id"": ""3436b5c0-f1c1-486e-af0c-915f63f72994"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""2202cf48-bc2d-4a9a-8807-4a93347971e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a01e97ef-711f-4840-98da-a0a0b789e76d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MultiButtonMash"",
            ""id"": ""480213d7-6eaa-4ef2-b441-6ef658736187"",
            ""actions"": [
                {
                    ""name"": ""Mash"",
                    ""type"": ""Button"",
                    ""id"": ""622571df-d7bf-4f3a-a1cc-389bba1c4859"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ebe12dca-da86-462e-bbe8-cf852adae87c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bf3c8b8d-95b4-49ac-a85a-8f28e5f005ad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d51df416-8ee0-4b0a-ba66-d918c278564e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""StandardMovement"",
            ""id"": ""cbd146cd-8752-4bb6-821c-203424e03903"",
            ""actions"": [
                {
                    ""name"": ""HorizMove"",
                    ""type"": ""Button"",
                    ""id"": ""da7c358e-2e48-44b8-ad62-e5c7a08e1dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VertMove"",
                    ""type"": ""Button"",
                    ""id"": ""09e2dafe-b289-4e34-acce-fd876dadd8dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8a82a05e-a890-4d10-b2a9-cb85e3b34017"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5d32ace2-dac5-4706-b273-0fcbf460c827"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""06557b55-2113-4ea1-be30-94d232be0e4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""58f7647a-a02c-4aa0-bacd-14e1c2f44d28"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2cb7327-977e-42ec-b2eb-a91412fe763f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cc1c3e55-4219-4cfd-8fb9-e5a62e082923"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4ab4d882-dcda-4acc-913e-de612fef8b24"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8bd32873-9039-4b2d-8eea-d59e42d140f6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ButtonSequenceInputs"",
            ""id"": ""00e7721e-2e5e-479c-a3d8-24c8b21f30da"",
            ""actions"": [
                {
                    ""name"": ""InputQ"",
                    ""type"": ""Button"",
                    ""id"": ""de59dc1b-1f66-4639-9d39-02056a14a62a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputW"",
                    ""type"": ""Button"",
                    ""id"": ""a48f9878-96a1-4bc2-9e66-26c60c89712d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputE"",
                    ""type"": ""Button"",
                    ""id"": ""a12a8d13-11f3-4d2f-9a13-7f346970719b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputA"",
                    ""type"": ""Button"",
                    ""id"": ""d6c6d723-7fba-4aa1-abe4-b8be2c61cf09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputS"",
                    ""type"": ""Button"",
                    ""id"": ""3aa871d5-0637-42df-ace7-fe3b47f1a489"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputD"",
                    ""type"": ""Button"",
                    ""id"": ""aa16a6b1-b74f-45aa-a7cf-c2a9015249e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa407225-37ca-4d9c-aaaa-9a2aabca6df5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c08f08e-f920-4381-8f9b-25a68dfc4d3a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""910bcf7f-66a0-4436-8259-8e52537c6a58"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b99962ea-5b33-4c9e-9040-bffb19ae9a94"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""050cbbc6-9d64-4613-8ea3-42f1673b6692"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""730c7bc5-dc33-4555-afa7-35710be61a9c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseDelta = m_Mouse.FindAction("Mouse Delta", throwIfNotFound: true);
        // SingleButtonMash
        m_SingleButtonMash = asset.FindActionMap("SingleButtonMash", throwIfNotFound: true);
        m_SingleButtonMash_Mash = m_SingleButtonMash.FindAction("Mash", throwIfNotFound: true);
        // TimerQTE
        m_TimerQTE = asset.FindActionMap("TimerQTE", throwIfNotFound: true);
        m_TimerQTE_QTE_E = m_TimerQTE.FindAction("QTE_E", throwIfNotFound: true);
        // Buttons
        m_Buttons = asset.FindActionMap("Buttons", throwIfNotFound: true);
        m_Buttons_Button1 = m_Buttons.FindAction("Button1", throwIfNotFound: true);
        m_Buttons_Pause = m_Buttons.FindAction("Pause", throwIfNotFound: true);
        // Space
        m_Space = asset.FindActionMap("Space", throwIfNotFound: true);
        m_Space_Space = m_Space.FindAction("Space", throwIfNotFound: true);
        // MultiButtonMash
        m_MultiButtonMash = asset.FindActionMap("MultiButtonMash", throwIfNotFound: true);
        m_MultiButtonMash_Mash = m_MultiButtonMash.FindAction("Mash", throwIfNotFound: true);
        // StandardMovement
        m_StandardMovement = asset.FindActionMap("StandardMovement", throwIfNotFound: true);
        m_StandardMovement_HorizMove = m_StandardMovement.FindAction("HorizMove", throwIfNotFound: true);
        m_StandardMovement_VertMove = m_StandardMovement.FindAction("VertMove", throwIfNotFound: true);
        m_StandardMovement_Jump = m_StandardMovement.FindAction("Jump", throwIfNotFound: true);
        // ButtonSequenceInputs
        m_ButtonSequenceInputs = asset.FindActionMap("ButtonSequenceInputs", throwIfNotFound: true);
        m_ButtonSequenceInputs_InputQ = m_ButtonSequenceInputs.FindAction("InputQ", throwIfNotFound: true);
        m_ButtonSequenceInputs_InputW = m_ButtonSequenceInputs.FindAction("InputW", throwIfNotFound: true);
        m_ButtonSequenceInputs_InputE = m_ButtonSequenceInputs.FindAction("InputE", throwIfNotFound: true);
        m_ButtonSequenceInputs_InputA = m_ButtonSequenceInputs.FindAction("InputA", throwIfNotFound: true);
        m_ButtonSequenceInputs_InputS = m_ButtonSequenceInputs.FindAction("InputS", throwIfNotFound: true);
        m_ButtonSequenceInputs_InputD = m_ButtonSequenceInputs.FindAction("InputD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_MouseDelta;
    public struct MouseActions
    {
        private @PlayerInputs m_Wrapper;
        public MouseActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_Mouse_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // SingleButtonMash
    private readonly InputActionMap m_SingleButtonMash;
    private ISingleButtonMashActions m_SingleButtonMashActionsCallbackInterface;
    private readonly InputAction m_SingleButtonMash_Mash;
    public struct SingleButtonMashActions
    {
        private @PlayerInputs m_Wrapper;
        public SingleButtonMashActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mash => m_Wrapper.m_SingleButtonMash_Mash;
        public InputActionMap Get() { return m_Wrapper.m_SingleButtonMash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SingleButtonMashActions set) { return set.Get(); }
        public void SetCallbacks(ISingleButtonMashActions instance)
        {
            if (m_Wrapper.m_SingleButtonMashActionsCallbackInterface != null)
            {
                @Mash.started -= m_Wrapper.m_SingleButtonMashActionsCallbackInterface.OnMash;
                @Mash.performed -= m_Wrapper.m_SingleButtonMashActionsCallbackInterface.OnMash;
                @Mash.canceled -= m_Wrapper.m_SingleButtonMashActionsCallbackInterface.OnMash;
            }
            m_Wrapper.m_SingleButtonMashActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mash.started += instance.OnMash;
                @Mash.performed += instance.OnMash;
                @Mash.canceled += instance.OnMash;
            }
        }
    }
    public SingleButtonMashActions @SingleButtonMash => new SingleButtonMashActions(this);

    // TimerQTE
    private readonly InputActionMap m_TimerQTE;
    private ITimerQTEActions m_TimerQTEActionsCallbackInterface;
    private readonly InputAction m_TimerQTE_QTE_E;
    public struct TimerQTEActions
    {
        private @PlayerInputs m_Wrapper;
        public TimerQTEActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @QTE_E => m_Wrapper.m_TimerQTE_QTE_E;
        public InputActionMap Get() { return m_Wrapper.m_TimerQTE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimerQTEActions set) { return set.Get(); }
        public void SetCallbacks(ITimerQTEActions instance)
        {
            if (m_Wrapper.m_TimerQTEActionsCallbackInterface != null)
            {
                @QTE_E.started -= m_Wrapper.m_TimerQTEActionsCallbackInterface.OnQTE_E;
                @QTE_E.performed -= m_Wrapper.m_TimerQTEActionsCallbackInterface.OnQTE_E;
                @QTE_E.canceled -= m_Wrapper.m_TimerQTEActionsCallbackInterface.OnQTE_E;
            }
            m_Wrapper.m_TimerQTEActionsCallbackInterface = instance;
            if (instance != null)
            {
                @QTE_E.started += instance.OnQTE_E;
                @QTE_E.performed += instance.OnQTE_E;
                @QTE_E.canceled += instance.OnQTE_E;
            }
        }
    }
    public TimerQTEActions @TimerQTE => new TimerQTEActions(this);

    // Buttons
    private readonly InputActionMap m_Buttons;
    private IButtonsActions m_ButtonsActionsCallbackInterface;
    private readonly InputAction m_Buttons_Button1;
    private readonly InputAction m_Buttons_Pause;
    public struct ButtonsActions
    {
        private @PlayerInputs m_Wrapper;
        public ButtonsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button1 => m_Wrapper.m_Buttons_Button1;
        public InputAction @Pause => m_Wrapper.m_Buttons_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Buttons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonsActions set) { return set.Get(); }
        public void SetCallbacks(IButtonsActions instance)
        {
            if (m_Wrapper.m_ButtonsActionsCallbackInterface != null)
            {
                @Button1.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton1;
                @Button1.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton1;
                @Button1.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton1;
                @Pause.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_ButtonsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Button1.started += instance.OnButton1;
                @Button1.performed += instance.OnButton1;
                @Button1.canceled += instance.OnButton1;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public ButtonsActions @Buttons => new ButtonsActions(this);

    // Space
    private readonly InputActionMap m_Space;
    private ISpaceActions m_SpaceActionsCallbackInterface;
    private readonly InputAction m_Space_Space;
    public struct SpaceActions
    {
        private @PlayerInputs m_Wrapper;
        public SpaceActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_Space_Space;
        public InputActionMap Get() { return m_Wrapper.m_Space; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceActions instance)
        {
            if (m_Wrapper.m_SpaceActionsCallbackInterface != null)
            {
                @Space.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnSpace;
            }
            m_Wrapper.m_SpaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
            }
        }
    }
    public SpaceActions @Space => new SpaceActions(this);

    // MultiButtonMash
    private readonly InputActionMap m_MultiButtonMash;
    private IMultiButtonMashActions m_MultiButtonMashActionsCallbackInterface;
    private readonly InputAction m_MultiButtonMash_Mash;
    public struct MultiButtonMashActions
    {
        private @PlayerInputs m_Wrapper;
        public MultiButtonMashActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mash => m_Wrapper.m_MultiButtonMash_Mash;
        public InputActionMap Get() { return m_Wrapper.m_MultiButtonMash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MultiButtonMashActions set) { return set.Get(); }
        public void SetCallbacks(IMultiButtonMashActions instance)
        {
            if (m_Wrapper.m_MultiButtonMashActionsCallbackInterface != null)
            {
                @Mash.started -= m_Wrapper.m_MultiButtonMashActionsCallbackInterface.OnMash;
                @Mash.performed -= m_Wrapper.m_MultiButtonMashActionsCallbackInterface.OnMash;
                @Mash.canceled -= m_Wrapper.m_MultiButtonMashActionsCallbackInterface.OnMash;
            }
            m_Wrapper.m_MultiButtonMashActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mash.started += instance.OnMash;
                @Mash.performed += instance.OnMash;
                @Mash.canceled += instance.OnMash;
            }
        }
    }
    public MultiButtonMashActions @MultiButtonMash => new MultiButtonMashActions(this);

    // StandardMovement
    private readonly InputActionMap m_StandardMovement;
    private IStandardMovementActions m_StandardMovementActionsCallbackInterface;
    private readonly InputAction m_StandardMovement_HorizMove;
    private readonly InputAction m_StandardMovement_VertMove;
    private readonly InputAction m_StandardMovement_Jump;
    public struct StandardMovementActions
    {
        private @PlayerInputs m_Wrapper;
        public StandardMovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizMove => m_Wrapper.m_StandardMovement_HorizMove;
        public InputAction @VertMove => m_Wrapper.m_StandardMovement_VertMove;
        public InputAction @Jump => m_Wrapper.m_StandardMovement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_StandardMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandardMovementActions set) { return set.Get(); }
        public void SetCallbacks(IStandardMovementActions instance)
        {
            if (m_Wrapper.m_StandardMovementActionsCallbackInterface != null)
            {
                @HorizMove.started -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnHorizMove;
                @HorizMove.performed -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnHorizMove;
                @HorizMove.canceled -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnHorizMove;
                @VertMove.started -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnVertMove;
                @VertMove.performed -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnVertMove;
                @VertMove.canceled -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnVertMove;
                @Jump.started -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_StandardMovementActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_StandardMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizMove.started += instance.OnHorizMove;
                @HorizMove.performed += instance.OnHorizMove;
                @HorizMove.canceled += instance.OnHorizMove;
                @VertMove.started += instance.OnVertMove;
                @VertMove.performed += instance.OnVertMove;
                @VertMove.canceled += instance.OnVertMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public StandardMovementActions @StandardMovement => new StandardMovementActions(this);

    // ButtonSequenceInputs
    private readonly InputActionMap m_ButtonSequenceInputs;
    private IButtonSequenceInputsActions m_ButtonSequenceInputsActionsCallbackInterface;
    private readonly InputAction m_ButtonSequenceInputs_InputQ;
    private readonly InputAction m_ButtonSequenceInputs_InputW;
    private readonly InputAction m_ButtonSequenceInputs_InputE;
    private readonly InputAction m_ButtonSequenceInputs_InputA;
    private readonly InputAction m_ButtonSequenceInputs_InputS;
    private readonly InputAction m_ButtonSequenceInputs_InputD;
    public struct ButtonSequenceInputsActions
    {
        private @PlayerInputs m_Wrapper;
        public ButtonSequenceInputsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputQ => m_Wrapper.m_ButtonSequenceInputs_InputQ;
        public InputAction @InputW => m_Wrapper.m_ButtonSequenceInputs_InputW;
        public InputAction @InputE => m_Wrapper.m_ButtonSequenceInputs_InputE;
        public InputAction @InputA => m_Wrapper.m_ButtonSequenceInputs_InputA;
        public InputAction @InputS => m_Wrapper.m_ButtonSequenceInputs_InputS;
        public InputAction @InputD => m_Wrapper.m_ButtonSequenceInputs_InputD;
        public InputActionMap Get() { return m_Wrapper.m_ButtonSequenceInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonSequenceInputsActions set) { return set.Get(); }
        public void SetCallbacks(IButtonSequenceInputsActions instance)
        {
            if (m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface != null)
            {
                @InputQ.started -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputQ;
                @InputQ.performed -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputQ;
                @InputQ.canceled -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputQ;
                @InputW.started -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputW;
                @InputW.performed -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputW;
                @InputW.canceled -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputW;
                @InputE.started -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputE;
                @InputE.performed -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputE;
                @InputE.canceled -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputE;
                @InputA.started -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputA;
                @InputA.performed -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputA;
                @InputA.canceled -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputA;
                @InputS.started -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputS;
                @InputS.performed -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputS;
                @InputS.canceled -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputS;
                @InputD.started -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputD;
                @InputD.performed -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputD;
                @InputD.canceled -= m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface.OnInputD;
            }
            m_Wrapper.m_ButtonSequenceInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InputQ.started += instance.OnInputQ;
                @InputQ.performed += instance.OnInputQ;
                @InputQ.canceled += instance.OnInputQ;
                @InputW.started += instance.OnInputW;
                @InputW.performed += instance.OnInputW;
                @InputW.canceled += instance.OnInputW;
                @InputE.started += instance.OnInputE;
                @InputE.performed += instance.OnInputE;
                @InputE.canceled += instance.OnInputE;
                @InputA.started += instance.OnInputA;
                @InputA.performed += instance.OnInputA;
                @InputA.canceled += instance.OnInputA;
                @InputS.started += instance.OnInputS;
                @InputS.performed += instance.OnInputS;
                @InputS.canceled += instance.OnInputS;
                @InputD.started += instance.OnInputD;
                @InputD.performed += instance.OnInputD;
                @InputD.canceled += instance.OnInputD;
            }
        }
    }
    public ButtonSequenceInputsActions @ButtonSequenceInputs => new ButtonSequenceInputsActions(this);
    public interface IMouseActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    public interface ISingleButtonMashActions
    {
        void OnMash(InputAction.CallbackContext context);
    }
    public interface ITimerQTEActions
    {
        void OnQTE_E(InputAction.CallbackContext context);
    }
    public interface IButtonsActions
    {
        void OnButton1(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ISpaceActions
    {
        void OnSpace(InputAction.CallbackContext context);
    }
    public interface IMultiButtonMashActions
    {
        void OnMash(InputAction.CallbackContext context);
    }
    public interface IStandardMovementActions
    {
        void OnHorizMove(InputAction.CallbackContext context);
        void OnVertMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IButtonSequenceInputsActions
    {
        void OnInputQ(InputAction.CallbackContext context);
        void OnInputW(InputAction.CallbackContext context);
        void OnInputE(InputAction.CallbackContext context);
        void OnInputA(InputAction.CallbackContext context);
        void OnInputS(InputAction.CallbackContext context);
        void OnInputD(InputAction.CallbackContext context);
    }
}
